1. Write a query to insert a new product in the collection with all required fields.
    ==>db.products.insertOne({    "_id": 16,    "name": "Gaming Laptop",    "brand": "GamePro",    "category": "Electronics",    "price": 106000,    "stock": 25,    "ratings": [4.7, 4.5, 4.8],    "description": "A gaming laptop is a high-performance portable computer designed for gaming, featuring powerful GPUs, fast processors, high-refresh-rate displays, and advanced cooling systems.",    "tags": ["laptop", "gaming", "electronics", "rgb"],    "lastUpdated": ISODate("2024-10-14")  })
{ acknowledged: true, insertedId: 16 }
	
2. Find all products with a price less than $100.
    
    ==> db.products.find({price:{$lt:100}},{products:1,name:1})
	
3.Update the stock quantity of "Wireless Headphones" to 40.	
  
   ==>  db.products.updateOne({name:"Wireless Headphone"},{$set:{$stock:40}})
   
4.  Delete all products from the "Gaming" category.
==> db.products.deleteMany({tags:{$in:["gaming"]}})  

5.Find all products and sort them by price in descending order.
 ==>db.products.find({}).sort({price:-1})

6.Find products with stock between 50 and 100 units.
 ==>db.products.find({stock:{$gt:50,$lt:100}},{name:true,_id:false})
 
7.Find products that have either "wireless" or "bluetooth" in their tags.
 ==>db.products.find({$text:{$search:"wireless bluetooth"}})

8.Find products where the average rating is greater than 4.5.
==> 
9. Find products that were last updated after February 1st, 2024.
==>db.products.find({
  lastUpdated: { $gt: new Date("2024-02-01T00:00:00.000Z") }
})

10. Find products with exactly 3 ratings.
 ==>db.products.find({
  ratings: { $size: 3 }
})

11.Perform a text search to find products related to "wireless charging".
==>db.products.createIndex({tags:"text"})
==>db.products.find({$text:{$search:"wireless charging"}},{name:1,_id:0})

12.Find products that contain the word "programmable" in their description.
==>db.products.createIndex({description:"text"})
==> db.products.find({$text:{$search:"programmable"}},{name:1,_id:0})

13. Search for products containing either "fitness" or "exercise" in their description.
==>db.products.createIndex({description:"text"})
==> db.products.find({$text:{$search:"fitness exercise"}},{name:1,_id:0})

14.Write a query to list all indexes in the products collection.
==>db.products.getIndexes()

15.Create a compound index on price and stock fields.
==>db.products.createIndex({price:1,stock:1})

16. Explain the query plan for finding products by category and sorting by price.
==> db.products.createIndex({category:"text"})
==>db.products.find({ category: "Sports" }).sort({ price: 1 })

17.Find products using the text index and sort by relevance score.
==>db.products.createIndex({category:"text"})
==>db.products.find({$text:{$search:"Electronics"}},{hamarascore:{$meta:"textScore"}}).sort({hamarascore:{$meta:"textScore"}})

18.Update all products' prices with a 10% discount for items with stock > 100.
==>
==>

19.Add a "featured" field to all products with an average rating > 4.5.
==>

20.Find all products in the "Electronics" category with a price between $50 and $200.
==>db.products.find({$text:{$search:"Electronics"},price:{$gt:50 ,$lt:200}},{name:1,_id:0})

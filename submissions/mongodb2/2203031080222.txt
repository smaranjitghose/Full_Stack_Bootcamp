1.Write a query to insert a new product in the collection with all required fields.
db.data.insertOne({name: "Wireless Earbuds Z1",category: "Electronics",price: 149.99,stock: 200,ratings: [4, 4, 5, 5, 4],lastUpdated: new Date(),description: "Compact wireless earbuds with noise-canceling technology and up to 24 hours of battery life.",tags: ["earbuds", "wireless", "bluetooth", "electronics"],brand: "AudioMax"}),

2.Find all products with a price less than $100.
db.data.find({price:{$lt:100}},{name:true,brand:true})

3.Update the stock quantity of "Wireless Headphones" to 40.
db.data.updateOne({name:"Wireless Headphones"},{$set:{stock:40}})

4.Delete all products from the "Gaming" category.
db.data.deleteMany({category:"Gaming"})

5.Find all products and sort them by price in descending order.
db.data.find().sort({ price: -1 });

6.Find products with stock between 50 and 100 units.
db.data.find({ stock: { $gte: 50, $lte: 100 } });

7.Find products that have either "wireless" or "bluetooth" in their tags.
db.data.find({ tags: { $in: ["wireless", "bluetooth"] } });

8. Find products where the average rating is greater than 4.5.
db.data.find({ $expr: { $gt: [ { $avg: "$ratings" }, 4.5 ] } });

9.Find products that were last updated after February 1st, 2024.
db.data.find({ lastUpdated: { $gt: ISODate("2024-02-01") } });

10. Find products with exactly 3 ratings.
 db.data.find({ ratings: { $size: 3 } });

11. Perform a text search to find products related to "wireless charging".
db.products.createIndex({tags:"text"})
db.products.find({$text:{$search:"wireless charging"}},{name:true,_id:false})

12. Find products that contain the word "programmable" in their description.
db.products.creatIndex({description:"text"})
db.products.find({$text:{$search:"programmable"}},{name:1,_id:0})

13. Search for products containing either "fitness" or "exercise" in their description.
db.products.creatIndex({description:"text"})
db.products.find({$text:{$search:"fitness exercise"}}) 

14. Write a query to list all indexes in the products collection.
db.products.getIndexes()

15. Create a compound index on price and stock fields.
db.products.createIndex({price:1,stock:1})

16.Explain the query plan for finding products by category and sorting by price.
db.products.createIndex({category:"text"})
db.products.find({$text:{$search:"Electronics"}},{name:1,brand:1,category:1,price:1,_id:0}).sort({price:1})

17. Find products using the text index and sort by relevance score.
db.products.createIndex({category:"text"})
db.products.find({$text:{$search:"Electronics"}},{name:1,brand:1,category:1,price:1,_id:0}).sort({price:1})

18. Update all products' prices with a 10% discount for items with stock > 100

19. Add a "featured" field to all products with an average rating > 4.5.

20. Find all products in the "Electronics" category with a price between $50 and $200.
db.products.find({$text:{$search:"Electronics"},price:{$gte:50 , $lte:200}},{name:1,price:1,_id:0})

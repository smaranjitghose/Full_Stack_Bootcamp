1) 🆕 Write a query to insert a new product in the collection with all required fields.
=> db.products.insertOne({
  _id: 16,
  name: "Air Purifier",
  brand: "CleanAir",
  category: "Home Appliances",
  price: 199.99,
  stock: 35,
  ratings: [4.5, 4.7, 4.6],
  description: "Compact air purifier with HEPA filter for clean air",
  tags: ["air purifier", "home", "clean air", "filter"],
  lastUpdated: new Date("2024-04-01"),
  specifications: {
    color: "White",
    power: "50W",
    dimensions: "30x30x60 cm"
  }
})


2) 💰 Find all products with a price less than $100.
=> db.products.find({ price: { $lt: 100 } },{ name: 1, price: 1, _id: 0 })


3) 🔄 Update the stock quantity of "Wireless Headphones" to 40.
=> db.products.updateOne({ name: "Wireless Headphones" },  { $set: { stock: 40 } })

4) ❌ Delete all products from the "Gaming" category.
=> db.products.deleteMany({ category: "Gaming" })

5) 📊 Find all products and sort them by price in descending order.
=> db.products.find({}, { name: 1, _id: 0 }).sort({ price: -1 })

6) 📦 Find products with stock between 50 and 100 units.
=> db.products.find( { stock: { $gte: 50, $lte: 100 } }, { name: 1, stock: 1, _id: 0 })

7) 🏷️ Find products that have either "wireless" or "bluetooth" in their tags.
=> db.products.find({ tags: { $in: ["wireless", "bluetooth"] } },{ name: 1, tags: 1, _id: 0 })

8) ⭐ Find products where the average rating is greater than 4.5.
=> db.products.find({ $expr: { $gt: [ { $avg: "$ratings" }, 4.5 ] } },{ name: 1, ratings: 1, _id: 0 })

9) 📅 Find products that were last updated after February 1st, 2024.
=> db.products.find({ lastUpdated: { $gt: ISODate("2024-02-01") } },{ name: 1, lastUpdated: 1, _id: 0 })

10) 🔢 Find products with exactly 3 ratings.
=> db.products.find({ ratings: { $size: 3 } },{ name: 1, ratings: 1, _id: 0 })

11) 🔍 Perform a text search to find products related to "wireless charging".
=> db.products.createIndex({ description: "text" })
   db.products.find({ $text: { $search: "wireless charging" } },{ name: 1, description: 1, _id: 0 })

12) 📝 Find products that contain the word "programmable" in their description.
=> db.products.find({ description: { $regex: /programmable/i } },{ name: 1, description: 1, _id: 0 })

13) 🔎 Search for products containing either "fitness" or "exercise" in their description.
=> db.products.find({ description: { $regex: /(fitness|exercise)/i } },{ name: 1, description: 1, _id: 0 })

14) 📑 Write a query to list all indexes in the products collection.
=> db.products.getIndexes()

15) 🔑 Create a compound index on price and stock fields.
=> db.products.createIndex({ price: 1, stock: 1 })

16) 📋 Explain the query plan for finding products by category and sorting by price.
=> db.products.find({ category: "YourCategory" }).sort({ price: 1 }).explain("executionStats")

17) 📈 Find products using the text index and sort by relevance score.
=> db.products.find({ $text: { $search: "YourSearchTerm" } }, { score: { $meta: "textScore" } }).sort({ score: { $meta: "textScore" } })

18) 🏷️ Update all products' prices with a 10% discount for items with stock > 100.
=> db.products.updateMany({ stock: { $gt: 100 } }, { $mul: { price: 0.9 } })

19) ✨ Add a "featured" field to all products with an average rating > 4.5.
=> db.products.updateMany({ avgRating: { $gt: 4.5 } }, { $set: { featured: true } })

20) 🔍 Find all products in the "Electronics" category with a price between $50 and $200.
=> db.products.find({ category: "Electronics", price: { $gte: 50, $lte: 200 } }, { name: 1, price: 1, category: 1, _id: 0 })
